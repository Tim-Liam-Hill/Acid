---------------------------------------------------
Determine if num divisible by 2 
---------------------------------------------------

AAT AAA AAA AAA AAA AAG # Push 2 onto s1
TAG ## Push user inp 
ACT # user number mod 2 (numbers appear in reverse order they are pushed)
AAT AAA AAA AAA AAA AAA #push 0
AGA #start if 
AGG #boolean condition is equal 
AAT AAA AAA AAA AAC CGC #push 'Y' ascii code assuming sign magnitude format 
TTG #print ascii value  
TCG #else 
AAT AAA AAA AAA AAC ATG #push 'N' ascii code assuming sign magnitude format 
TTG #print ascii value  
TCT #endif 

---------------------------------------------------
Print N "*"
---------------------------------------------------

Get a number N from the user 
print N many "*" on the same line.
Builds up to the next excersize

TAG #Push user input onto S1 

AAT AAA AAA AAA AAA GAG #push ascii code for "*" onto s1 
ACA #move top of s1 onto s2 
AAA AAA AAA AAA #define a function with identifier 'AAA AAA AAA' (assuming function names are 3 Codons long) 
AAT AAA AAA AAA AAA AAA # push 0 onto stack 
TGA 

TTT #End function 'AAA AAA AAA' 

---------------------------------------------------
Reverse Star Pyramid
---------------------------------------------------

Given a number N, print N many rows of "*"
The number of "*" on a single row is index of row + 1 (starting count from 0)
so if N = 3 it will look like 
*
**
***

TAG #Push user input onto S1 
AAA AAA AAA AAA #define a function with identifier 'AAA AAA AAA' (assuming function names are 3 Codons long) 


TTT #End function 'AAA AAA AAA' 


---------------------------------------------------
Reverse a string 
---------------------------------------------------

IDEA: 
- Get the num of letters from the user 
- then read in that many letters 

start at the bottom. 
- swap and push s2 to s1 N-1 times (n is length of string) 
- go all the way back to beginning string 
- decrement N 
- repeat until N == 1


